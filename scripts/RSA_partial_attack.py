


### From file ###

"""
modulus:

18:e0:7c:94:2b:88:68:cf:81:46:13:b3:52:0f:26:5b:4e:9d:fe:30:85:ab:c2:b1:b4:65:dd:9d:b8:58:f3:6f:1a:c5:36:ed:4d:ca:ed:de:c7:3e:40:5a:7f:dc:6a:08:51:e8:68:19:ec:56:e1:ad:ee:4e:05:e0:28:29:1e:16:51:f7:82:4f:38:41:95:e1:97:31:4e:e7:07:be:1f:fe:a2:54:df:bb:4d:f4:d3:f4:41:6c:18:34:83:40:ab:1a:da:58:1f:d4:a7:46:25:c5:f9:04:3a:f5:7a:ad:34:66:43:8a:89:2f:5f:ce:ed:f4:2e:43:aa:12:5a:12:d5:ce:e0:cb:b9:a4:9a:88:3f:39:54:3c:d2:ff:9d:6b:95:1b:2a:10:f1:49:a3:41:c7:62:ac:8b:ca:4f:5c:07:12:08:71:dc:96:c7:b3:d7:56:70:f8:a1:e3:6f:ab:62:44:28:eb:f0:f7:2f:e5:df:06:c6:b3:99:f7:2e:74:47:38:60:a4:45:47:50:00:5f:7d:23:cc:44:6a:07:39:74:bd:6d:ff:2f:fa:35:a3:24:fa:b8:70:06:b7:6b:dc:62:c0:00:4b:e0:a3:80:f1:fa:3d:48:01:0a:86:54:55:7c:ac:79:27:27:9e:68:6e:6c:01:44:bc:35:b0:48:47:1b:2d:7f:94:bb:8a:9a:08:9d:6a:d1:91:8d:e5:e5:fe:06:36:7f:e9:f4:dd:9c:c0:2e:eb:c6:12:a9:db:a4:b2:20:6c:5f:10:97:78:ca:d9:be:fe:1b:58:1f:1a:d5:98:15:5c:fd:6a:8c:c7:29:97:10:1d:7f:e0:aa:21:28:f7:9f:40:42:fc:c3:0d:35:1b:d8:03:75:36:e8:4b:32:9f:99:f9:10:d2:7a:34:c4:8f:98:99:12:d5:06:ef:23:b2:22:4f:d8:ca:df:74:17:a6:60:09:b5:d2:0c:8b:af:04:3a:93:8f:92:36:bf:1e:07:d6:2d:6a:2f:c0:27:11:36:22:6a:c0:0b:68:ea:97:2b:27:ae:b2:1f:ad:e0:7b:06:2d:6f:70:b2:c3:6f:76:1b:6b:1e:2d:72:b3:87:fb:d6:63:7f:07:17:29:28:0b:85:62:2f:60:24:e7:8b:8b:98:47:ea:67:3a:db:04:2e:25:e2:dc:c1:dc:28:70:cc:1b:32:c4:5b:dc:57:5e:88:3d:19:ea:66:f7:f1:b5:af:d4:38:06:b1:43:32:aa:a3:23:eb:5a:c2:1b:43:0b:cf:94:f8:b1:cf:94:6d:57:64:d5:57:df:9a:47:ac:c6:b7:1e:72:77:c8:f8:17:bb:98:1a:52:c9:ea:b7:e3:b9:12:19:51:4e:4d

publicExponent: 65537 (0x10001)

privateExponent:

(248 bytes...):5d:f3:65:5d:a7:87:2b:00:af:ad:05:bb:8d:cb:9e:8a:16:0c:aa:db:76:00:12:66:79:2a:64:32:a0:46:6b:1b:65:b7:40:d5:a4:f3:41:c9:f0:e7:dd:43:8d:62:d3:c4:de:5b:23:73:1b:2a:b3:9c:72:26:25:1e:56:59:8d:89:fd:90:3f:5d:4c:b0:46:fc:37:8c:66:97:86:8b:01:16:13:fe:c8:ff:ac:e5:26:4a:35:04:eb:b9:bc:aa:9b:a5:38:3b:91:b0:73:f6:9b:e6:c6:79:e1:6c:7b:5d:1d:e2:c3:83:13:db:59:f6:b3:78:c0:a6:96:72:65:73:47:bb:8b:70:28:3c:3c:ee:5c:17:21:be:4c:a9:a3:28:4a:34:ec:f0:47:c4:01:75:62:f4:c9:5a:43:13:ff:f5:0b:ab:87:b8:50:f6:51:d0:08:68:83:ad:9b:1e:f3:69:f2:c7:3f:eb:22:b8:fc:59:2c:96:56:b0:ab:21:2c:0a:59:af:76:ae:f5:21:1e:38:84:b6:6a:f5:7a:f1:0e:cb:6d:93:9f:d9:6c:a0:26:fb:b5:7b:22:70:b9:7d:be:8a:ce:f4:17:50:d5:5c:1d:a0:0f:12:c7:dd:a3:21:d9:d5:cf:73:56:98:cf:cd:46:c9:86:2c:d0:88:af:a5:ce:59:a5:0f:27:82:9a:fa:51:11:ba:88:95:01
"""

### Recovery ###


e = 65537
N = 101488901274987106243008046664297591978410108822177701224264737145391886867777863865779640816486923839406653614204815584563470694843520915349191661339457603576906569791512425754439214467327972140265420895643837946177538246458301772110319955635519387200869462809983000819296418068910353074543317205692541156219384068930266433088510169089382831903732611424843740113539833323115560294168973391110303498123734466335129066201288834721501483867474636200733386979964739485616801471539708886216738014758407744802083142655594793326632736953087243401427662858669409830427690418550023423676450904076098710995740020426935103029790365727988328766672748962103576562293139416346977114655999353393309411431217105028993322560045023194793046335074762496780720089431584590189739909611993419092523833620977264875152410358221833271104477477367202565026019971448096943301701313168877824579718362055808194473032400700886281744231393276629079083050475941741419734503735034492258058112602102917698316232001032365161422788754599624622549709631874422083565258324917572147355176650054831866441138675466706028132628232061292764452407854477239120427566185601719253733331422307338052867276222531674633814783899459839211610468809952429870652718065591948466518576717
d = 14338084335152049619208410266821656591278391917018057062998609029029550632396070829552105602337755769099547511707754225092956993878243653982928165618251752198342766716104164945916838688506678136283328221037419868888055240684349437529176183905577019285501020531194835936381128941652862526199662915387041924414185953790831967029352198531762129487119713938448502883500354271683778961236506708774583870096929380750620225190580550189849140969231112521997057272768401321858893870238610077160995095391973463609139797337709726596232943122146160127196751902082993367059019996251617223662665086226760367909757268619356917535055821855804030475041281281
leaked_bits = 2128
d0 = d % (2 ** leaked_bits)



X = var('X')
P.<x> = PolynomialRing(Zmod(N))

for k in range(80, e+1):
    print 'Trying:', k
    results = solve_mod([e * d0 * X - k * X * (N - X + 1) + k * N == X], 2 ** leaked_bits)

    for m in results:
        f = x * 2 ** leaked_bits + ZZ(m[0])
        f = f.monic()
        roots = f.small_roots()

        if roots:
            x0 = roots[0]
            p = gcd(2 ** leaked_bits * x0 + ZZ(m[0]), N)
            print '[+] Found factorization!'
            print 'p =', ZZ(p)
            print 'q =', N / ZZ(p)
            break
	

   